//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WaterShed.WaterShedservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WaterShedservice.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doLogin", ReplyAction="http://tempuri.org/IService1/doLoginResponse")]
        BOM.User doLogin(BOM.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doLogin", ReplyAction="http://tempuri.org/IService1/doLoginResponse")]
        System.Threading.Tasks.Task<BOM.User> doLoginAsync(BOM.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doRegister", ReplyAction="http://tempuri.org/IService1/doRegisterResponse")]
        bool doRegister(BOM.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doRegister", ReplyAction="http://tempuri.org/IService1/doRegisterResponse")]
        System.Threading.Tasks.Task<bool> doRegisterAsync(BOM.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doGetCrop", ReplyAction="http://tempuri.org/IService1/doGetCropResponse")]
        BOM.watershed_crop doGetCrop(BOM.watershed_crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doGetCrop", ReplyAction="http://tempuri.org/IService1/doGetCropResponse")]
        System.Threading.Tasks.Task<BOM.watershed_crop> doGetCropAsync(BOM.watershed_crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doGetCropList", ReplyAction="http://tempuri.org/IService1/doGetCropListResponse")]
        BOM.watershed_crop[] doGetCropList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doGetCropList", ReplyAction="http://tempuri.org/IService1/doGetCropListResponse")]
        System.Threading.Tasks.Task<BOM.watershed_crop[]> doGetCropListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doRemoveCrop", ReplyAction="http://tempuri.org/IService1/doRemoveCropResponse")]
        bool doRemoveCrop(BOM.watershed_crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doRemoveCrop", ReplyAction="http://tempuri.org/IService1/doRemoveCropResponse")]
        System.Threading.Tasks.Task<bool> doRemoveCropAsync(BOM.watershed_crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doAddCrop", ReplyAction="http://tempuri.org/IService1/doAddCropResponse")]
        bool doAddCrop(BOM.watershed_crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/doAddCrop", ReplyAction="http://tempuri.org/IService1/doAddCropResponse")]
        System.Threading.Tasks.Task<bool> doAddCropAsync(BOM.watershed_crop crop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStates", ReplyAction="http://tempuri.org/IService1/GetAllStatesResponse")]
        BOM.watershed_state[] GetAllStates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStates", ReplyAction="http://tempuri.org/IService1/GetAllStatesResponse")]
        System.Threading.Tasks.Task<BOM.watershed_state[]> GetAllStatesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WaterShed.WaterShedservice.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WaterShed.WaterShedservice.IService1>, WaterShed.WaterShedservice.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BOM.User doLogin(BOM.User user) {
            return base.Channel.doLogin(user);
        }
        
        public System.Threading.Tasks.Task<BOM.User> doLoginAsync(BOM.User user) {
            return base.Channel.doLoginAsync(user);
        }
        
        public bool doRegister(BOM.User user) {
            return base.Channel.doRegister(user);
        }
        
        public System.Threading.Tasks.Task<bool> doRegisterAsync(BOM.User user) {
            return base.Channel.doRegisterAsync(user);
        }
        
        public BOM.watershed_crop doGetCrop(BOM.watershed_crop crop) {
            return base.Channel.doGetCrop(crop);
        }
        
        public System.Threading.Tasks.Task<BOM.watershed_crop> doGetCropAsync(BOM.watershed_crop crop) {
            return base.Channel.doGetCropAsync(crop);
        }
        
        public BOM.watershed_crop[] doGetCropList() {
            return base.Channel.doGetCropList();
        }
        
        public System.Threading.Tasks.Task<BOM.watershed_crop[]> doGetCropListAsync() {
            return base.Channel.doGetCropListAsync();
        }
        
        public bool doRemoveCrop(BOM.watershed_crop crop) {
            return base.Channel.doRemoveCrop(crop);
        }
        
        public System.Threading.Tasks.Task<bool> doRemoveCropAsync(BOM.watershed_crop crop) {
            return base.Channel.doRemoveCropAsync(crop);
        }
        
        public bool doAddCrop(BOM.watershed_crop crop) {
            return base.Channel.doAddCrop(crop);
        }
        
        public System.Threading.Tasks.Task<bool> doAddCropAsync(BOM.watershed_crop crop) {
            return base.Channel.doAddCropAsync(crop);
        }
        
        public BOM.watershed_state[] GetAllStates() {
            return base.Channel.GetAllStates();
        }
        
        public System.Threading.Tasks.Task<BOM.watershed_state[]> GetAllStatesAsync() {
            return base.Channel.GetAllStatesAsync();
        }
    }
}
